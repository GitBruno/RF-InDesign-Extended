// This script must go in the startup scripts directory for InDesign:// path_to_InDesign/Scripts/startup scripts/RFEventHandlers.jsx// It will create event handlers based on the directories and scripts// it finds in 'RF-InDesign-Extended/Event Handlers/'#target "InDesign";$.level = 0;#include "../RF-InDesign-Extended/Extendables/extendables.jsx";var rfidx = require("rockfaxidx");var prefs = rfidx.Prefs();main();function main () {  var here = new File($.fileName);    // eg '/Applications/Adobe InDesign CS5/Scripts/RF-InDesign-Extended' on a Mac  var scriptFolder = Folder(here.parent.parent.folders(prefs.setting("userFolderName"))[0].path);    // eg '/Applications/Adobe InDesign CS5/Scripts/RF-InDesign-Extended/Event Handlers' on a Mac  var eventFolders = scriptFolder.folders(prefs.setting("userFolderName"))[0].folders(prefs.setting("userEventsFolderName"))[0].folders();  var menuFolders  = scriptFolder.folders(prefs.setting("userFolderName"))[0].folders(prefs.setting("userEventsFolderName"))[0].folders(prefs.setting("userMenuFolderName"))[0].folders();  addEvents(eventFolders, "events");  addEvents(menuFolders,  "menus");}function addEvents (eventFolders, type) {  for (var i = 0; i < eventFolders.length; i++) {    var targetName = eventFolders[i].displayName;    var eventTargetFolders = eventFolders[i].folders();    for (var k = 0; k < eventTargetFolders.length; k++) {      var eventType = eventTargetFolders[k].displayName;      var eventScripts = eventTargetFolders[k].files();      for (var j = 0; j < eventScripts.length; j++) {        var script      = eventScripts[j].fsName;        var scriptName  = eventScripts[j].displayName;        switch(type) {          case "events":            addEvent (targetName, eventType, script, scriptName);            break;          case "menus":            addMenuEvent ("$ID/" + targetName, "$ID/" + eventType, script, scriptName);            break;        }      }    }  }}function addMenuEvent (targetName, eventType, script, eventName) {  var target = app.menus.item(targetName);  _addEvent (target, eventType, script, eventName);}function addEvent (targetName, eventType, script, eventName) {  // This needs some work. Currently the code below will need modifying  // to cope with document-level event handlers.  var target = {"Application":app}[targetName];  _addEvent (target, eventType, script, eventName);}function _addEvent (target, eventType, script, eventName) {  try{    if (script.match(/\.jsx$|\.applescript$|\.scpt$|\.scptd$|\.jsxbin/)) {      var myEventListener = target.eventListeners.add(eventType, script);      myEventListener.name = File(script).displayName;    }  }catch(e){alert(e)}}