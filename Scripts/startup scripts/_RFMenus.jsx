// This script must go in the startup scripts directory for InDesign:// path_to_InDesign/Scripts/startup scripts/RFMenus.jsx// You must make a folder to contain the directories and scripts for your menus// using this format:// InDesign/Scripts/userFolderName/userMenuFolderName/menuName/// For each sub-directory the script finds in `userMenuFolderName` it will make// a new sub-menu with the name of that folder.// For each file it finds in that sub-folder it will make a new menu item and// associate the file as the menu action.#target "InDesign";$.level = 0;#include "../RF-InDesign-Extended/Extendables/extendables.jsx";var rfidx = require("rockfaxidx");var preferences = require("preferences");var userPermissions = preferences.Store("user_menu_permissions");var userName = File('~').displayName.toLowerCase();var prefs = rfidx.Prefs();main();function main () {  var here           = new File($.fileName);  var scriptFolder   = Folder(here.parent.parent.folders(prefs.setting("userFolderName"))[0].path);  var menuFolders    = scriptFolder.folders(prefs.setting("userFolderName"))[0].folders(prefs.setting("userMenuFolderName"))[0].folders();  var menuNames      = [];  for (var i = 0; i < menuFolders.length; i++) {    deleteMenu(menuFolders[i]);    createMenu(menuFolders[i], app.menus.item("$ID/Main"));  }}function deleteMenu (folder) {  try{    var mnu = app.menus.item("$ID/Main").submenus.item(parseName(folder.displayName));    // if (mnu !== undefined) {mnu.remove();}    if (mnu.isValid) {mnu.remove();}  }catch(e){}}function createMenu (folder, baseMenu) {  var platformIsWindows = $.os.match(/Windows/) !== null;  if (platformIsWindows) {    if (folder.displayName.match(/applescript/gi)) {      return;    }  }  var fles = folder.getFiles();  var versionNoString = "";    // ??? hangs if I delete this loop ??? WTF?  for (var i = 0; i < fles.length; i++) {    // log.dev(fles[i].displayName);  }    var menuName = parseName(folder.displayName);  var users;  if (users = userPermissions.data[menuName]) {    if (!users.contains(userName)) {      return;    }   }    var mnu = baseMenu.submenus.add(menuName);    for (i = 0; i < fles.length; i++) {    if (fles[i].constructor.name == 'File' || fles[i].name.match(/\.scptd/)) {      addMenuItem (fles[i], mnu);    } else {      createMenu (fles[i], mnu);    }  }}function addMenuItem (file, mnu) {  var fileName = file.displayName;    if (!$.os.match(/Macintosh/)) {    if (fileName.match(/\.applescript|\.scptd/)) {      return;    }  }    var smaTitle = parseName(fileName);    // Mac OS hidden files  if (smaTitle.charAt(0) === ".") {return;}  if (smaTitle.match(/----/)) {    mnu.menuSeparators.add();    return;  }  var sma = app.scriptMenuActions.add(smaTitle);    sma.addEventListener(    'onInvoke',    file.fsName  );  mnu.menuItems.add(sma);}function parseName (name) {  name = name.replace(/^\d+_/, "")             .replace(/^\w{1,3}___/, "")// This allows me to ad in an extra identifier after the '001_', eg '001_rf___Some File I Want to Identify Programmatically.jsx'             .replace(/%20/, " ")             .replace(/\.jsx*|\.jsxbin/, "")             .replace(/\.scptd*/, "")             .replace(/\.applescript/, "");  return name;}