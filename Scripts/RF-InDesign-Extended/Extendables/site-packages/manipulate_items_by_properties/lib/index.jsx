$.level = 0;

exports.itemsMatchingSelection = function (itemsToCheck, preferencesNamePattern) {
  var sel = app.selection;
  if (sel.length === 0) {return;}
  var parent = sel[0].parent;
  var preferences = require("preferences");
  var myPrefs = preferences.Store(preferencesNamePattern);
  myPrefs.refresh();
  var dialogControls = myPrefs.data["included checkboxes"];
  var matchingItems = [];
  var keys = [];
  var values = dialogControls.values();
  for (var i = 0; i < values.length; i++) {
    keys.push(values[i].keys());
  }
  keys = keys.flatten();

  var w = exports.choosePropsToMatchWindow(dialogControls, myPrefs);
  var res = w.show();
  if (res == 2 || res == 0) {return;}
  saveSettings (w, dialogControls, myPrefs);
    
  var propsToCheck = exports.getPropsToCheck(w);
  
  for (var i = 0; i < sel.length; i++) {
    var propsToCheckAgainst = {};
    for (var k = 0; k < keys.length; k++) {
      try{
        propsToCheckAgainst[keys[k]] = app.doScript (('sel[i].' + keys[k]), undefined, undefined, UndoModes.entireScript, "");
      }catch(e){}
    }

    matchingItems.push(exports.itemsMatchingProperties(itemsToCheck, propsToCheck, propsToCheckAgainst));
  }

  return matchingItems.flatten();
};

exports.getPropsToCheck = function (window) {
  var propsToCheck = [];
  for (var i = 0; i < window.outerPanel1.children.length; i++) {
    for (var k = 0; k < window["panel" + i].children.length; k++) {
      if (window["panel" + i].children[k].value == true) {
        propsToCheck.push(window["panel" + i].children[k].text);
      }
    }
  }
  return propsToCheck;
};

exports.itemsMatchingProperties = function (itemsToCheck, propsToCheck, propsToCheckAgainst) {
  var matchingItems = [];
  // alert(propsToCheckAgainst[propsToCheck[0]])
  for (var i = 0; i < itemsToCheck.length; i++) {
    var select = true;
    try{
      for (var k = 0; k < propsToCheck.length; k++) {
        var strng = 'itemsToCheck[i].getElements()[0].' + propsToCheck[k]
        var klass = app.doScript (strng, undefined, undefined, UndoModes.entireScript, "Script Name");
        if (klass != propsToCheckAgainst[propsToCheck[k]] ||
          !itemsToCheck[i].itemLayer.visible) {
          select = false;
        }
      }
      if (select) {matchingItems.push(itemsToCheck[i]);}
    }catch(e){}
  }
  return matchingItems;
};

exports.choosePropsToMatchWindow = function (dialogControls, myPrefs) {
  var w = new Window ("dialog", "Select Similar");

  w.orientation = "column";
  w.alignChildren = "left";

  w.outerPanel1 = w.add ("panel");
  w.outerPanel1.alignChildren = "left";
  w.outerPanel2 = w.add ("panel");
  w.outerPanel2.orientation = "row";
  w.outerPanel2.minimumSize.width = 305;
  w.outerPanel2.alignChildren = "right";
  var groups = dialogControls.keys();
  w.rfCheckboxes = [];
  for (var i = 0; i < groups.length; i++) {
    w["panel" + i] = w.outerPanel1.add("panel");
    w["panel" + i].orientation = "column";
    w["panel" + i].alignChildren = "left";
    w["panel" + i].minimumSize.width = 270;
    var groupKeys = dialogControls[groups[i]].keys();
    for (var k = 0; k < groupKeys.length; k++) {
      if (myPrefs.data["included checkboxes"][groups[i]][groupKeys[k]]) {
        w.rfCheckboxes.push(w["panel" + i].add( "checkbox", undefined, groupKeys[k]));
        w.rfCheckboxes.last().value = myPrefs.data["selected checkboxes"][groupKeys[k]]
      }
    }
  }
  
  w.cancelButton = w.outerPanel2.add( "button", undefined, "Cancel");
  w.prefsButton  = w.outerPanel2.add( "button", undefined, "Prefs");
  w.prefsButton.addEventListener('click', function (e) {w.close();myPrefs.file.execute();});
  w.okButton     = w.outerPanel2.add( "button", undefined, "OK");

  return w;
};

function (e, myPrefs, w) {
  w.close();
  myPrefs.file.execute();
  return 2
}

function saveSettings (w, dialogControls, myPrefs) {
  for (var i = 0; i < w.rfCheckboxes.length; i++) {
    myPrefs.data["selected checkboxes"][w.rfCheckboxes[i].text] = w.rfCheckboxes[i].value;
  }
  myPrefs.save();
}