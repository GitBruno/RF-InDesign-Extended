#target "InDesign";#targetengine 'main';$.level = 0;if (typeof(EXTENDABLES) === 'undefined') {#include "../../../Extendables/extendables.jsx";}// if (typeof(rflib)   == 'undefined') {var rflib = require("rf_library");}if (typeof(rfidx)   == 'undefined') {var rfidx = require("rockfaxidx");}var clPrefs, currentLayer;var sel;main();function main (event) {  if (app.documents.length === 0 || app.modalState) {    return;  }  for (var l = app.documents.length - 1; l >= 0; l--) {    var doc = app.documents[l]    currentLayer = doc.activeLayer.name;    app.scriptPreferences.enableRedraw = false;    clPrefs = correctLayerPrefs();    var layerNames = clPrefs.layerNames();    for (var i = layerNames.length - 1; i >= 0; i--) {      var layer = doc.layers.item(layerNames[i]);      var styleNames = clPrefs.associatedStyles(layerNames[i]);      for (var j = styleNames.length - 1; j >= 0; j--) {        app.findObjectPreferences = null;        try{          app.findObjectPreferences.appliedObjectStyles = styleNames[j];        }catch(e){continue}        var objects = doc.findObject();        for (var k = objects.length - 1; k >= 0; k--) {          try{            objects[k].itemLayer = layer;          }catch(e){}        }      }    }  }}function correctLayerPrefs () {  // This stuff should make it only reload the json on change, but it doesn't work yet.  // Currently the script reloads the prefs each time it runs. The performance hit doesn't  // seem bad though.  this.prefsFile = File("Event Handlers/Application/afterSelectionAttributeChanged/correct_layer_prefs.json").at(Folder.extendables.parent);  this.currentModifiedDate = this.prefsFile.modified;  this.dataStore = JSON.parse(readPref(this.prefsFile));    // return this.dataStore;    this.data = function () {    var fileModifiedDate = this.prefsFile.modified;    if (this.currentModifiedDate === fileModifiedDate) {      return this.dataStore;    }else{      this.dataStore = JSON.parse(readPref(this.prefsFile));      return this.dataStore;    }  };  this.setting = function (key) {    return this.data()[key];  };    this.layerNames = function () {    return this.data().layers.keys();  };    this.associatedStyles = function (layerName) {    return this.data().layers[layerName].styles;  };  this.save = function () {  };  return this;}function readPref (file) {  if (file.exists === true) {    file.open("r");    file.encoding= 'UTF-8';    var theText = file.read();    file.close();    return decomment(theText);  }}function decomment (string) {  return string.replace(/^[ \t]*\/\/[^\r\n]*\n*|/gm, "");}