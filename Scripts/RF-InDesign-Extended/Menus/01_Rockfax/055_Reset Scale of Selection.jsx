#target "InDesign";#targetengine 'main';$.level = 0;#include "../../Extendables/extendables.jsx";var rflib = require("rf_library");var prefs = rflib.Prefs();var itemsThatAreTooSmall = [];app.doScript ('main();', undefined, undefined, UndoModes.entireScript, "Reset Scale");function main () {  app.scriptPreferences.enableRedraw = false;  if (testSettings() == false) {return;}  app.layoutWindows[0].transfromReferencePoint = AnchorPoint.CENTER_ANCHOR;  var originalSel  = app.selection;  var actionSet    = originalSel;  resizeGraphics(actionSet);  redefineScaling(actionSet);  clearObjectStyleOverrides(actionSet);    app.select(originalSel);  if (itemsThatAreTooSmall.length > 0) {    app.select(itemsThatAreTooSmall);    alert("The selected items are too small to be reset.");  }}function clearObjectStyleOverrides (items) {  var line_styles = prefs.setting("line_styles");  for (var i = 0; i < items.length; i++) {    try{        // alert(line_styles);      var style = items[i].appliedObjectStyle.name;      if (line_styles.contains(style) || style.match(/\dpt|arrow|road|track|path|river/i)) {        var clear = false;        if (items[i].gapColor.name == "None") {          clear = true;        }        items[i].clearObjectStyleOverrides();        if (clear) {          items[i].gapColor = "None";        }      }    }catch(e){}  }}function redefineScaling (items) {  for (var i = 0; i < items.length; i++) {    if (items[i].constructor.name == 'Polygon' ||        items[i].constructor.name == 'GraphicLine' ||        items[i].constructor.name == 'Rectangle' ||        items[i].constructor.name !== 'Group' && items[i].appliedObjectStyle.name !== '[None]') {      try{        items[i].redefineScaling([1.0, 1.0]);      }catch(e){        if(e.number == 11270){          itemsThatAreTooSmall.push(items[i]);        }      }    }  }}function resizeGraphics (items) {  var temp = [];  for (var i = 0; i < items.length; i++) {    if (items[i].constructor.name !== 'Polygon' ||      items[i].appliedObjectStyle.name == "[None]") {      temp.push(items[i]);    }  }    actionSet = [];  for (var i = 0; i < temp.length; i++) {    var cont = true;    if (!temp[i].hasOwnProperty('images')) {cont = false;}    if (temp[i].constructor.name == 'Oval') {cont = false;}    if (cont) {continue;}    actionSet.push(temp[i]);  }    for (var i = 0; i < actionSet.length; i++) {    actionSet[i].absoluteHorizontalScale = 100;    actionSet[i].absoluteVerticalScale = 100;  }}function testSettings () {  if (app.transformPreferences.whenScaling !== WhenScalingOptions.ADJUST_SCALING_PERCENTAGE) {    app.transformPreferences.whenScaling = WhenScalingOptions.ADJUST_SCALING_PERCENTAGE;    // log.info("A setting in your system preferences was incorrect, so this script could not work. The setting has been changed, but if you have scaled any objects, please undo, then redo the scaling before running this script again.");    alert("A setting in your system preferences was incorrect, so this script could not work. The setting has been changed, but if you have scaled any objects, please undo, then redo the scaling before running this script again.");    return false;  }}